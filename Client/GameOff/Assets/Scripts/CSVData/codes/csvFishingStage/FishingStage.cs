
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.csvFishingStage
{

public sealed class FishingStage :  Bright.Config.BeanBase 
{
    public FishingStage(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["stage_name"].IsString) { throw new SerializationException(); }  StageName = _json["stage_name"]; }
        { if(!_json["fishing_time"].IsNumber) { throw new SerializationException(); }  FishingTime = _json["fishing_time"]; }
        { var _json1 = _json["item_type"]; if(!_json1.IsArray) { throw new SerializationException(); } ItemType = new System.Collections.Generic.List<int>(_json1.Count); foreach(JSONNode __e in _json1.Children) { int __v;  { if(!__e.IsNumber) { throw new SerializationException(); }  __v = __e; }  ItemType.Add(__v); }   }
        { var _json1 = _json["item_weight"]; if(!_json1.IsArray) { throw new SerializationException(); } ItemWeight = new System.Collections.Generic.List<int>(_json1.Count); foreach(JSONNode __e in _json1.Children) { int __v;  { if(!__e.IsNumber) { throw new SerializationException(); }  __v = __e; }  ItemWeight.Add(__v); }   }
        { var _json1 = _json["fish_rarity"]; if(!_json1.IsArray) { throw new SerializationException(); } FishRarity = new System.Collections.Generic.List<int>(_json1.Count); foreach(JSONNode __e in _json1.Children) { int __v;  { if(!__e.IsNumber) { throw new SerializationException(); }  __v = __e; }  FishRarity.Add(__v); }   }
        { var _json1 = _json["rarity_weight"]; if(!_json1.IsArray) { throw new SerializationException(); } RarityWeight = new System.Collections.Generic.List<int>(_json1.Count); foreach(JSONNode __e in _json1.Children) { int __v;  { if(!__e.IsNumber) { throw new SerializationException(); }  __v = __e; }  RarityWeight.Add(__v); }   }
    }

    public FishingStage(int id, string stage_name, int fishing_time, System.Collections.Generic.List<int> item_type, System.Collections.Generic.List<int> item_weight, System.Collections.Generic.List<int> fish_rarity, System.Collections.Generic.List<int> rarity_weight ) 
    {
        this.Id = id;
        this.StageName = stage_name;
        this.FishingTime = fishing_time;
        this.ItemType = item_type;
        this.ItemWeight = item_weight;
        this.FishRarity = fish_rarity;
        this.RarityWeight = rarity_weight;
    }

    public static FishingStage DeserializeFishingStage(JSONNode _json)
    {
        return new csvFishingStage.FishingStage(_json);
    }

    /// <summary>
    /// ID
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 阶段
    /// </summary>
    public string StageName { get; private set; }
    /// <summary>
    /// 按键时长（秒）
    /// </summary>
    public int FishingTime { get; private set; }
    /// <summary>
    /// 掉落物<br/>1= 鱼类<br/>2= 道具
    /// </summary>
    public System.Collections.Generic.List<int> ItemType { get; private set; }
    /// <summary>
    /// 掉落物权重
    /// </summary>
    public System.Collections.Generic.List<int> ItemWeight { get; private set; }
    /// <summary>
    /// 鱼类稀有度<br/>1= 普通<br/>2= 稀有<br/>3= 非常稀有
    /// </summary>
    public System.Collections.Generic.List<int> FishRarity { get; private set; }
    /// <summary>
    /// 鱼类权重
    /// </summary>
    public System.Collections.Generic.List<int> RarityWeight { get; private set; }

    public const int __ID__ = -1198399384;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "StageName:" + StageName + ","
        + "FishingTime:" + FishingTime + ","
        + "ItemType:" + Bright.Common.StringUtil.CollectionToString(ItemType) + ","
        + "ItemWeight:" + Bright.Common.StringUtil.CollectionToString(ItemWeight) + ","
        + "FishRarity:" + Bright.Common.StringUtil.CollectionToString(FishRarity) + ","
        + "RarityWeight:" + Bright.Common.StringUtil.CollectionToString(RarityWeight) + ","
        + "}";
    }
    }
}
